# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-05-01 12:45
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djchoices.choices


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('schools', '0014_auto_20170223_2302'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(db_index=True, help_text='Используется в урлах. Лучше обойтись латинскими буквами, цифрами и подчёркиванием', max_length=100)),
                ('label', models.CharField(help_text='Покороче, используется на метках', max_length=30)),
                ('description', models.TextField(help_text='Подлинее, подробное описание')),
                ('can_be_deleted', models.BooleanField(default=True, help_text='Системные группы не могут быть удалены')),
                ('list_members_to_everyone', models.BooleanField(default=False, help_text='Видны ли всем список участников и принадлежность пользователей группе')),
                ('owner', models.ForeignKey(blank=True, help_text='None, если владелец группы — система', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owned_groups', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='schools.School')),
            ],
        ),
        migrations.CreateModel(
            name='GroupAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_type', models.PositiveIntegerField(choices=[(0, 'Нет доступа, группа не видна'), (1, 'Может просматривать участников'), (2, 'Может добавлять и удалять участников'), (3, 'Полный доступ')], db_index=True, validators=[djchoices.choices.ChoicesValidator({0: 'Нет доступа, группа не видна', 1: 'Может просматривать участников', 2: 'Может добавлять и удалять участников', 3: 'Полный доступ'})])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupInGroupMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('added_by', models.ForeignKey(blank=True, help_text='Кем добавлен участник группы. None, если добавлено системой.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='groups.Group')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_in_groups', to='groups.Group')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserInGroupMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('added_by', models.ForeignKey(blank=True, help_text='Кем добавлен участник группы. None, если добавлено системой.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='groups.Group')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_in_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupAccessForGroup',
            fields=[
                ('groupaccess_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='groups.GroupAccess')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='groups.Group')),
            ],
            options={
                'abstract': False,
            },
            bases=('groups.groupaccess',),
        ),
        migrations.CreateModel(
            name='GroupAccessForUser',
            fields=[
                ('groupaccess_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='groups.GroupAccess')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=('groups.groupaccess',),
        ),
        migrations.AddField(
            model_name='groupaccess',
            name='added_by',
            field=models.ForeignKey(blank=True, help_text='Кем выдан доступ. Если None, то системой', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupaccess',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_groups.groupaccess_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='groupaccess',
            name='to_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accesses', to='groups.Group'),
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together=set([('short_name', 'school')]),
        ),
    ]
